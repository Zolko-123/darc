/*
darc, the Durham Adaptive optics Real-time Controller.
Copyright (C) 2010 Alastair Basden.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*bin/date
omniidl -bpython control.idl
echo Updated IDL
exit
*/
//CORBA interface defininition for RTC control software.
module RTC{
  interface Control{
    typedef long INT32;
    typedef unsigned long UINT32;
    struct FDATA{//float32
      UINT32 n;
      sequence<char> data;
    };
    struct DDATA{//float64
      UINT32 n;
      sequence<char> data;
    };
    struct BDATA{//int8
      UINT32 n;
      sequence<char> data;
    };
    struct HDATA{//int16
      UINT32 n;
      sequence<char> data;
    };
    struct UHDATA{//uint16
      UINT32 n;
      sequence<char> data;
    };
    struct IDATA{//int32
      UINT32 n;
      sequence<char> data;
    };
    struct SERVAL{
      char dtype;
      INT32 nd;
      sequence<INT32> dims;
      UINT32 size;
      sequence<char> data;
    };
    struct SDATA{
      UINT32 n;
      sequence<string> data;
    };
    struct SVDATA{
      UINT32 n;
      sequence<SERVAL> data;
    };
    
    string echoString(in string mesg);
    FDATA WFacqBckgrd();//depreciated
    FDATA AverageImage(in INT32 nframes,in INT32 whole);//depreciated
    FDATA AverageCentroids(in INT32 nframes);//depreciated
    FDATA CdoInteractM(in float timeDelayMirror,in SERVAL vMirror,in UINT32 frameNoMirror, in UINT32 cycleNoMirror, in float timeDelayTT, in float vTT, in UINT32 frameNoTT, in UINT32 cycleNoTT, in UINT32 abMotPt, in UINT32 abMotPup);//depreciated
    FDATA CmakeInteractM(in FDATA acts,in IDATA steps,in INT32 lock);//depreciated
    INT32 RTCinit(in SERVAL fname);//filename or data array containing params
    INT32 RTChalt();
    INT32 ControlHalt();
    INT32 SetRTCDecimation(in string stream,in INT32 val);
    INT32 RemoveError(in string err);
    BDATA GetInactiveBuffer();
    SDATA Set(in SDATA names, in SVDATA vals,in SDATA comments,in INT32 doSwitch,in INT32 check,in INT32 copy);
    INT32 RequestParamSwitch(in INT32 wait);
    INT32 CopyToInactive();
    BDATA GetActiveBufferArray();
    INT32 TogglePause(in INT32 p);
    SDATA GetStreams();
    INT32 ReleaseLock();
    SVDATA Execute(in string cmd, in SVDATA dataList);
    SDATA GetErrors();
    INT32 PublishParams();
    string GetControlHost();
    UHDATA GetActuators();
    SERVAL Get(in string name);
    string GetComment(in string name);
    INT32 SetCloseLoop(in INT32 cl);
    string GetStatus();
    SVDATA GetStream(in string name,in INT32 latest,in INT32 wholeBuffer);
    INT32 SetDecimation(in string name,in INT32 d1,in INT32 d2,in INT32 log,in string fname);
    INT32 StartStream(in SDATA names,in string host, in INT32 port,in INT32 decimate,in INT32 sendFromHead,in string header,in INT32 reset);//decimate can be -1 or 0 which means don't change...
    SDATA GetLabels();
    INT32 WaitParamChange(in float timeout);
    string GetLog();
    SERVAL CalibrateWholeImage(in INT32 copy);//rearranges subaps so that whole image is calibrated... note, DM control will now be useless.  If copy set, will copy the rearranged subaps into the other param buffer.  Depreciated
    INT32 RestorePartialImageCalibration();//Restores subaps to what they should be.  Depreciated
    INT32 Transfer(in SERVAL data,in string fname);
    string GetVersion();
    SERVAL Remove(in string name,in INT32 returnval,in INT32 doSwitch);//remove a value
    SVDATA GetDecimation();
    INT32 Swap(in string n1, in string n2);
    INT32 WakeLogs(in INT32 flag);
    INT32 ConnectParamSubscriber(in string host,in INT32 port,in SDATA names);
    INT32 StartLogStream(in string host,in INT32 port,in string name,in INT32 limit,in float sleeptime);
    string StartSummer(in string stream,in INT32 nsum,in INT32 decimation,in INT32 affin,in INT32 prio,in INT32 fromHead,in INT32 startWithLatest,in INT32 rolling,in string dtype,in string outputname,in INT32 nstore);//starts a summing process
    INT32 StopSummer(in string name);
    SDATA GetSummerList();
    SVDATA SumData(in string stream,in INT32 nsum,in string dtype);//sums data in a stream, after which the summer process is exited.
    INT32 GetNControlThreads();
    SVDATA WatchParam(in INT32 tag,in SDATA paramList,in float timeout);
  };
};
