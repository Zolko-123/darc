To install:

Library dependencies:
Install omniORB, omniORBpy and FFTW:
Either with your repository or for example with (as root):
make fftw
make omniORB (which takes a while)

Note - the --enable-float and --enable-shared options are required
with FFTW (these are probably set by your repository, but if you have
problems, this may be why).

You may also need to install numpy and matplotlib, gtk and pyinotify
(including python bindings) if you are on a non-standard platform. You
can probably get these from your repository or do (as root) make numpy
; make matplotlib.  If you are on a very non-standard platform, other
libraries and tools may also be needed (libc, gcc etc)

You may also need packages such as python-dev depending on your distribution.

To test whether you have these, you can do:
python -c "import numpy,matplotlib,gtk,pyinotify"

Edit /etc/omniORB.cfg to have (or larger if using a large AO system)
giopMaxMsgSize = 209715200    # 200 MBytes

DARC installation:
If required, copy Makefile.config to Makefile.config.local and edit as required.

Then run make in the darc directory:
make

Then make any interface libraries that you need (note - these will
probably require specific camera/mirror hardware libraries - you will
know what you need...).
e.g.
(cd src && make libsl240Int32cam.so )

Then do:
make install.

Then copy your interface libraries to lib e.g. (depending what is in Makefile.config.local):
cp src/libsl240Int32cam.so /rtc/lib


Copy the contents of etc/rtc.bashrc after adapting for your
requirements, e.g. into your ~/.bashrc file:

Make sure PYTHONPATH includes lib/python
Make sure your ORBInitRef environment variable points to your name
server: Possibly export ORBInitRef="NameService=corbaname::localhost"
Make sure lib is on your LD_LIBRARY_PATH
Make sure PATH includes bin


To run, you can then do (after running the omniORB nameserver,
omniNames, in the location pointed to by your ORBInitRef variable)):
darccontrol /PATH/TO/YOURCONFIGFILE -o

As an example, you can run
control.py /rtc/conf/configCanaryAFile.py -o

Note, the -o flag isn't needed, and shouldn't be used in a production
environment, in which case, standard output is redirected to a file in
/dev/shm, which can then be read by clients.  However, it is useful
for debugging as it allows you to view output in your terminal.

Then wait for a bit while it initialises and try:
darcmagic status

If is says "paused" (amongst other things) then there is a
configuration error (illegal parameters), so you should investigate.
If it says "running" then darc is running successfully.

A simple darctalk command line tool can also be installed without
needing the whole RTC - typically a user would have this on their
laptop.

To install this, untar the darctalk-latestversion.tgz and follow
instructions.

To make this package, make darctalk.tgz should suffice.

Further installation notes:

sl240 drivers for FC12:
add #include <linux/sched.h> in dcfi.h
add -fPIC to CC_DEFINES in api/makefile.linux-2.6

see /etc/security/limits.conf (man limits.conf) to set up real-time
stuff:
someuser         -       memlock         51200 #kB
someuser         -       rtprio          80
or
@somegroup - memlock valInKB



WINDOWS installation of the GUI:
Note, this isn't tested frequently, so may not work out of the box.
Install the following:
gtk  - check that you can import gtk in python.
numpy
matplotlib
omniORB
omniORBpy
glade
You then need to do:
omniidl -bpython control.idl
or if you can't get this to work, copy control_idl.py from a working installation.
Make directory c:/RTC/shm/
Get the darc code.
The GUI should then run... (rtcgui.py)



Ubuntu 10.04 installation:
sudo apt-get install the following packages:
git-core
emacs
openssh-server
python-omniorb
fftw3
fftw3-dev
omniidl4
omniidl4-python
omniorb4-nameserver
python-dev
python-numpy
texlive-latex-base
texlive-fonts-recommended
doxygen
glade
texlive
python-matplotlib

Get the latest version of darc... (you've probably already got it if
you are reading this)

Then:
make installdev
export PYTHONPATH=$PYTHONPATH:/home/XXX/git/darc/lib/python
export PATH=$PATH:/home/XXX/git/darc/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/XXX/git/darc/lib
export ORBInitRef="NameService=corbaname::localhost"
Edit /etc/omniORB.cfg to have (or larger if using a large AO system)
giopMaxMsgSize = 209715200    # 200 MBytes

cd doc
make #(may need running several times)

Now run:
darccontrol conf/configcamfile.py -o

Unable to connect to nameservice?
  Make sure omniNames is running (ps ax | grep omniNames).
  If you have the following line in /etc/hosts then remove it (comment out)
  ::1    localhost ip6-localhost ip6-loopback


Fedora 14 installation:
yum install (as root):
emacs
git
numpy
python-devel
glade3
texlive-latex
doxygen
python-matplotlib
gcc
fftw3-devel
gcc-c++

Get the DARC source (as a user, not root, from git or sourceforge).
If necessary, untar it:
tar -zxvf darc.tgz
cd darc

make omniORB (as root) - not available as a package for fedora.

