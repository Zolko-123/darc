To install:
Install omniORB and FFTW:
Either with your repository or for example with (as root):
make fftw
make omniORB (which takes a while)

Note - the --enable-float and --enable-shared options are required
with FFTW (these are probably set by your repository, but if you have
problems, this may be why).

You may also need to install numpy and matplotlib and gtk (including
python bindings) if you are on a non-standard platform. You can
probably get these from your repository or do (as root) make numpy ;
make matplotlib.  If you are on a very non-standard platform, other
libraries and tools may also be needed (libc, gcc etc)

To test whether you have these, you can do:
python -c "import numpy,matplotlib,gtk"

Edit /etc/omniORB.cfg to have (or larger if using a large AO system)
giopMaxMsgSize = 209715200    # 200 MBytes

Edit your Makefile.config file as required.

Then run make in the darc directory:
make

Then make any interface libraries that you need (note - these will
probably require specific camera/mirror hardware libraries - you will
know what you need...)
e.g.
(cd src && make libsl240Int32cam.so)

Then do:
make install.

Then copy your interface libraries to lib e.g.:
cp src/libsl240Int32cam.so /rtc/lib


Source etc/rtc.bashrc after editing it for your requirements:

Make sure PYTHONPATH includes lib/python
Make sure your ORBInitRef environment variable points to your name
server.
Make sure lib is on your LD_LIBRARY_PATH



To run, you can then do (after running the omniORB nameserver,
omniNames, in the location pointed to by your ORBInitRef variable)):
control.py /PATH/TO/YOURCONFIGFILE -o

As an example, you can run
control.py /rtc/conf/configCanaryAFile.py -o

Note, the -o flag isn't needed, and shouldn't be used in a production
environment, in which case, standard output is redirected to a file in
/dev/shm, which can then be read by clients.  However, it is useful
for debugging as it allows you to view output in your terminal.

Then wait for a bit while it initialises and try:
darcmagic status

If is says "paused" (amongst other things) then there is a
configuration error (illegal parameters), so you should investigate.
If it says "running" then darc is running successfully.

A simple darctalk command line tool can also be installed without
needing the whole RTC - typically a user would have this on their
laptop.

To install this, untar the darctalk-latestversion.tgz and follow
instructions.

To make this package, make darctalk.tgz should suffice.



WINDOWS installation of the GUI:
Note, this isn't tested frequently, so may not work out of the box.
Install the following:
gtk  - check that you can import gtk in python.
numpy
matplotlib
omniORB
omniORBpy
glade
You then need to do:
omniidl -bpython control.idl
or if you can't get this to work, copy control_idl.py from a working installation.
Make directory c:/RTC/shm/
Get the darc code.
The GUI should then run... (rtcgui.py)
