#!/usr/bin/env python
#darc, the Durham Adaptive optics Real-time Controller.
#Copyright (C) 2010 Alastair Basden.

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as
#published by the Free Software Foundation, either version 3 of the
#License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.

#You should have received a copy of the GNU Affero General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

# =============================================================================
#  CANARY
#  The MOAO pathfinder for EAGLE
# =============================================================================
#  
# This module implemetes a simple command line interface to the RTCS.
# 
CVSID="$Id$"
# 


# standard Python libraries
import sys
import platform
import numpy

# DARC specific libraries
import controlCorba
import FITS

numpy.set_printoptions(threshold=2**31)


def printUsage():
    print """darc  Copyright (C) 2010 Alastair Basden
    This program comes with ABSOLUTELY NO WARRANTY;
    This is free software, and you are welcome to redistribute it
    under certain conditions (GNU Affero GPL version 3);\n
    """
    print "\nUsage: %s [ init | stop | set | get | read | transfer ] [args] [--debug] [--prefix=PREFIX]"%sys.argv[0]
    print "\nIf init, args should be -file=FILE where FILE is .py or .fits [-remote] if the file is on the RTC."
    print "\nIf stop, no args are needed"
    print "\nIf set, args should be [ -name=NAME | -file=FILE.fits | -string=STRING | -value=VALUE | -comment=COMMENT] [-swap[=0/1]] [-check[=0/1]]"
    print "  NAME is the parameter name, \n  FILE is a FITS file name, \n  STRING is a string"
    print "  VALUE is something that can be evaluated \n  COMMENT is a string"
    print "  with the flag [-telemetry] this sets the telemetry's decimation rate, args should be -s=stream -d=DECIMATEVAL"
    print "\nIf get, args should be -name=NAME [-print[=1/0]] [-file=FILE] [-FITS=FILE.fits]"
    print "  Instead of -name=NAME, you can use -labels to get a list of the labels or -log to get the RTC log or -version to get the versions."
    print "\nIf read args should be [-s=NAME | -sN=NAME] [-o=FILENAME | -oN=FILENAME] [-n=NITERS] [-f=STARTINGFRAMENO] [-d=DECIMATE] [-latest] [-nosave] [-print]"
    print "\nIf transfer args should be -file=file.xxx [-remote=remote.xxx]\nTransfers the file."
    print "\nExample: %s set -name=bleedGain -value=0.04"%sys.argv[0]
    print "Example: %s get -name=bleedGain"%sys.argv[0]
    print "Example: %s read -s=rtcPxlBuf -o=pxl.fits -s1=rtcCentBuf -s2=rtcActuatorBuf -n=10 -f=10000 -d=1"%sys.argv[0]
    print "Example: %s init -file=config.py"%sys.argv[0]

    sys.exit(0)



if __name__ == '__main__':
    arg={}

# some sanity checks
    if len(sys.argv)>1:
        if "--prefix" in sys.argv[1]:
            px=sys.argv.pop(1)
            sys.argv.append(px)
        cmd=sys.argv[1]
        if cmd not in ["init","stop","set","get","read","transfer"]:
            printUsage()
    else:
        printUsage()

# separate the arguments
    arglist=[]
    for i in sys.argv[2:]:
        if i[0]=="-":
            j=i[1:].split("=")
            if len(j)>1:
                arg[j[0]]=j[1]
            else:
                arg[j[0]]=1
        else:
            arglist.append(i)

    debug=0
    if "-debug" in arg.keys():
        debug=1
    prefix=""
    if "-prefix" in arg.keys():
        prefix=arg["-prefix"]

#Create the corba client
    ctrl=controlCorba.controlClient(controlName=prefix+"Control",debug=debug)



#  _       _ _
# (_)_ __ (_) |_
# | | '_ \| | __|
# | | | | | | |_
# |_|_| |_|_|\__|
#
# darctalk init
    if cmd=="init":
        if arg.has_key("file"):
            config=arg["file"]
#        elif len(arglist)>0:
#            config=arglist.pop(0)
        else:
            print "No config file specified"
            printUsage()

        if arg.has_key("remote"):
            data=config#the file is a remote file on the rtc... just send the filename
        elif config[-3:]==".py":
            data=open(config).read()
        elif config[-5:]==".fits":
            data=FITS.Read(config)[1]
        else:
            print "Config file should be .py or .fits"
            printUsage()
        ctrl.RTCinit(data)
        ctrl.Set("configfile",config)



#      _
#  ___| |_ ___  _ __
# / __| __/ _ \| '_ \
# \__ \ || (_) | |_) |
# |___/\__\___/| .__/
#              |_|
#
# darctalk stop
    elif cmd=="stop":
        ctrl.RTChalt()



#           _
#  ___  ___| |_
# / __|/ _ \ __|
# \__ \  __/ |_
# |___/\___|\__|
#
# darctalk set
    elif cmd=="set":
        name=None

        # darctalk set -telemetry : sets the telemetry decimation rate
        if arg.has_key("telemetry"):
            if arg.has_key("s"):
                stream=arg["s"]
            else:
                raise Exception("No stream specified. Use -s=streamName")
                #stream=arglist.pop(0)
            stream=prefix+stream
            if arg.has_key("d"):
                d=int(arg["d"])
            else:
                raise Exception("You forgot to specify the decimation rate. Use -d=INTEGER")
                #d=int(arglist.pop(0))
            ctrl.SetDecimation(stream,d,0,0,"")

        # the default behaviour : this is the name of the parameter to set
        elif arg.has_key("name"):
            name=arg["name"]
#        elif len(arglist)>0:
#            name=arglist.pop(0)
        else:
            printUsage()

        # other arguments
        if arg.has_key("file"):
            data=FITS.Read(arg["file"])[1]
        elif arg.has_key("string"):
            data=arg["string"]
        elif arg.has_key("value"):
            data=eval(arg["value"])
        #else:
        #   data=eval(arglist.pop(0))
        if arg.has_key("comment"):
            comment=arg["comment"]
        #elif len(arglist)>0:
        #    comment=arglist.pop(0)
        else:
            comment="set by darctalk"
        if arg.has_key("swap"):
            swap=int(arg["swap"])
        else:
            swap=1
        if arg.has_key("check"):
            check=int(arg["check"])
        else:
            check=1
        copy=int(arg.get("copy",1))
        # do the set if there is something to set
        if name!=None:
            if name=="pause":#a special case for pause
                rt=[]
                try:
                    ctrl.TogglePause(data)
                except:
                    rt=["pause"]
            else:
                rt=ctrl.set(name,data,comment,swap=swap,check=check,copy=copy)
            if len(rt)>0:
                print "Error setting %s"%str(rt)
                raise Exception("Error setting %s"%str(rt))



#             _
#   __ _  ___| |_
#  / _` |/ _ \ __|
# | (_| |  __/ |_
#  \__, |\___|\__|
#  |___/
#
# darctalk get
    elif cmd=="get":
        name=None

        # darctalk get -labels : returns the parameter labels in DARC
        if arg.has_key("labels"):
            value=ctrl.GetLabels()
            value.sort()
        # darctalk get -log : I suppose it gets some logfile
        elif arg.has_key("log"):
            value=ctrl.GetLog()
        elif arg.has_key("version"):
            value=ctrl.GetVersion()+"\ndarctalk version:"+CVSID
        # darctalk get -name=parameter_label_name is the "normal" behaviour
        elif arg.has_key("telemetry"):#get telemetry
            #print "Not yet implemented - ask if you want it!"
            #value="Not yet implemented"
            value=ctrl.GetDecimation()
        elif arg.has_key("decimation"):
            #print "darcmagic get -decimate needs implementing properly"
            #value=eval(ctrl.Execute("data=str(self.c.getRTCDecimation())",[])[0])
            value=ctrl.GetDecimation()

        elif arg.has_key("name"):
            if int(arg.get("comment",0)):
                value=ctrl.GetComment(arg["name"])
            else:
                value=ctrl.Get(arg["name"])
#        elif len(arglist)>0:                      # won't work anymore !
#            name=arglist[0]
        else:
            printUsage()

        if arg.has_key("print"):
            if int(arg["print"]):
                print value
        else:
            print value
        if arg.has_key("file"):
            open(arg["file"],"w").write(str(value))
        if arg.has_key("FITS"):
            if type(value)!=numpy.ndarray:
                value=numpy.array(value)
            FITS.Write(value,arg["FITS"])
        elif arg.has_key("fits"):
            if type(value)!=numpy.ndarray:
                value=numpy.array(value)
            FITS.Write(value,arg["fits"])

#                     _
#  _ __ ___  __ _  __| |
# | '__/ _ \/ _` |/ _` |
# | | |  __/ (_| | (_| |
# |_|  \___|\__,_|\__,_|
#
# darctalk read
    elif cmd=="read":
        niter=1
        fno=-1
        decimate=1
        grab=1
        deinterlace=0
        if arg.has_key("n"):
            niter=int(arg["n"])
        if arg.has_key("f"):
            fno=int(arg["f"])
        if arg.has_key("d"):
            decimate=int(arg["d"])
        if arg.has_key("grab"):
            grab=int(arg["grab"])
        if arg.has_key("deinterlace"):#do some canary specific deinterlacing.
            deinterlace=int(arg["deinterlace"])
        if niter>10000:
            #niter=10000;
            #print "Too many frames requested, limiting to 10000 frames. If you need more, please use the telemetry interface"
            print "WARNING\n"*100
            print "Zoltan imposed limit of 10000 frames from darctalk is being ignored"
            print "Prepare for styc death..."
            print "WARNING\n"*100
            print "Segmentation fault"
# work out which streams are required...
        streamDict={}
        outDict={}
        for k in arg.keys():
            if k[0]=="s":
                if len(k)>1:
                    try:
                        i=int(k[1:])
                        streamDict[i]=prefix+arg[k]
                    except:
                        pass
                else:
                    streamDict[0]=prefix+arg[k]
            elif k[0]=="o":
                if len(k)>1:
                    try:
                        i=int(k[1:])
                        outDict[i]=arg[k]
                    except:
                        pass
                else:
                    outDict[0]=arg[k]

#        if len(arglist)>0:
#            streamDict["a"]=prefix+arglist.pop(0)
#            if len(arglist)>0:
#                outDict["a"]=arglist.pop(0)
        bufarr=None
        getstate=int(arg.get("getstate",0))
        if getstate>0:
            #get the initial state
            bufarr=ctrl.GetActiveBufferArray()
            if getstate>1:
                import buffer
                b=buffer.Buffer(None,size=bufarr.size)
                b.buffer[:]=bufarr
                labels=b.getLabels()
                for l in labels:
                    val=b.get(l)
                    if type(val)==numpy.ndarray and val.size*val.itemsize>getstate:
                        b.set(l,"XX",comment=b.getComment(l))
                bufarr=b.buffer[:b.getMem()]


# get the data
        if niter==1 and fno==-1 and len(streamDict.keys())==1 and grab==1:#single stream, single frame, so do a grab...
            latest=int(arg.get("latest",0))
            k=streamDict.keys()[0]
            data,t,fno=ctrl.GetStream(streamDict[k],latest)
            if arg.has_key("print"):
#                if int(arg["print"]):
#                    print data
#            else:
                print data
            if outDict.has_key(k):
                fname=outDict[k]
            else:
                fname=streamDict[k]+".fits"
                if arg.has_key("nosave"):
                    fname=None
            data.shape=[1]+list(data.shape)
            if deinterlace:
                if k[len(prefix):]=="rtcActuatorBuf" and data.shape[1]>56:
                    print "WARNING - deinterlacing rtcActuatorBuf..."
                    nact=data.shape[1]
                    rmtt=0
                    rmlgs=0
                    doalpao=0
                    dtype=data.dtype
                    if nact>54:#has the TT
                        print "Solving NGS TT"
                        nact-=2
                        rmtt=1
                    if nact>56:#and the lgs TT
                        print "Solving LGS TT"
                        nact-=1
                        rmlgs=1
                    if nact>100:#and the alpao (which is float64 cast as uint16)
                        print "Solving ALPAO - casting"
                        nact-=241*3
                        doalpao=1
                        dtype=numpy.float64#alpao is float64.
                    arr=numpy.zeros((data.shape[0],nact),dtype)
                    arr[:,:52]=data[:,:52]
                    if rmtt:
                        arr[:,52:54]=(data[:,52:55:2]-(32768-21300))*32768./21300.
                    else:
                        arr[:,52:54]=data[:,52:54]
                    if rmlgs:
                        sf=0.5/(0.5+numpy.sqrt(3)/2)
                        a54=(data[:,56]-(32768+16384-32768*sf))/sf
                        a55=-2/numpy.sqrt(3)/sf*(sf/2*a54+data[:,57]-(32768*sf*(0.5+numpy.sqrt(3)/2.)+32768+16384))
                        arr[:,54]=a54
                        arr[:,55]=a55
                    else:
                        arr[:,54:56]=data[:,54+rmtt*2:56+rmtt*2]
                    if doalpao:
                        tmp=data[:,56+rmtt*2+rmlgs:].copy().view(numpy.float64)
                        arr[:,56:]=tmp
                    else:
                        arr[:,56:]=data[:,56+rmtt*2+rmlgs:]
                    data=arr
            if fname!=None:
                FITS.Write(data,fname)
                FITS.Write(numpy.array([t]),fname,writeMode="a",extraHeader="COMMENT = 'Timestamp'")
                FITS.Write(numpy.array([fno]).astype(numpy.int32),fname,writeMode="a",extraHeader="COMMENT = 'Frame numbers'")
                if bufarr!=None:
                    FITS.Write(bufarr,fname,writeMode="a",extraHeader=["COMMENT = 'State'","STATSIZE= %d"%getstate])

        elif niter>0:
            myhostname=None
            if arg.has_key("myhostname"):
                myhostname=arg["myhostname"]
                #print "Using host %s"%myhostname
            localbuffer=int(arg.get("local",1))
            if platform.system()=="Darwin" and localbuffer==1:
                localbuffer=0
                print "Forcing remote read - OS X bug"
            data=ctrl.GetStreamBlock(streamDict.values(),niter,fno=fno,decimate=decimate,verbose=int(arg.get("verbose",0)),myhostname=myhostname,localbuffer=localbuffer,nstoreLocal=int(arg.get("nstore",100)))
            if arg.has_key("print"):
                print data

# save the data.
            fnodict={}
            ftdict={}
            for key in streamDict.keys():#for each requested stream
                stream=streamDict[key]
                if outDict.has_key(key):
                    fname=outDict[key]
                else:#no stream filename specified, so make one up...
                    fname=stream+".fits"
                    if arg.has_key("nosave"):
                        fname=None
                if fname!=None:
                    thedata=numpy.array([x[0] for x in data[stream]])
                    if deinterlace:
                        if stream[len(prefix):]=="rtcActuatorBuf" and thedata.shape[1]>56:
                            print "WARNING - deinterlacing rtcActuatorBuf..."
                            nact=thedata.shape[1]
                            rmtt=0
                            rmlgs=0
                            doalpao=0
                            dtype=thedata.dtype
                            if nact>54:#has the TT
                                print "Solving NGS TT"
                                nact-=2
                                rmtt=1
                            if nact>56:#and the lgs TT
                                print "Solving LGS TT"
                                nact-=1
                                rmlgs=1
                            if nact>100:#and the alpao (which is float64 cast as uint16)
                                print "Solving ALPAO - casting"
                                nact-=241*3
                                doalpao=1
                                dtype=numpy.float64#alpao is float64.
                            arr=numpy.zeros((thedata.shape[0],nact),dtype)
                            arr[:,:52]=thedata[:,:52]
                            if rmtt:
                                arr[:,52:54]=(thedata[:,52:55:2]-(32768-21300))*32768./21300.
                            else:
                                arr[:,52:54]=thedata[:,52:54]
                            if rmlgs:
                                sf=0.5/(0.5+numpy.sqrt(3)/2)
                                a54=(thedata[:,56]-(32768+16384-32768*sf))/sf
                                a55=-2/numpy.sqrt(3)/sf*(sf/2*a54+thedata[:,57]-(32768*sf*(0.5+numpy.sqrt(3)/2.)+32768+16384))
                                arr[:,54]=a54
                                arr[:,55]=a55
                            else:
                                arr[:,54:56]=thedata[:,54+rmtt*2:56+rmtt*2]
                            if doalpao:
                                tmp=thedata[:,56+rmtt*2+rmlgs:].copy().view(numpy.float64)
                                arr[:,56:]=tmp
                            else:
                                arr[:,56:]=thedata[:,56+rmtt*2+rmlgs:]
                            thedata=arr
                    FITS.Write(thedata,fname)
                    ftdict[key]=numpy.array([x[1] for x in data[stream]])
                    FITS.Write(ftdict[key],fname,writeMode="a",extraHeader="COMMENT = 'Timestamp'")
                    fnodict[key]=numpy.array([x[2] for x in data[stream]]).astype(numpy.int32)
                    FITS.Write(fnodict[key],fname,writeMode="a",extraHeader="COMMENT = 'Frame numbers'")
                    if bufarr!=None:
                        FITS.Write(bufarr,fname,writeMode="a",extraHeader=["COMMENT = 'State'","STATSIZE= %d"%getstate])

            #And now do a test of the frame numbers to see if okay.
            refkey=streamDict.keys()[0]
            fref=fnodict[refkey]
            allframenumbersequal=1
            allframetimesequal=1
            err=0
            for key in fnodict.keys():
                f=fnodict[key]
                if not numpy.alltrue((f[1:]-f[:-1])==decimate):
                    print "Some frames missing from %s"%key
                    err=1
                if not numpy.alltrue(f==fref):
                    allframenumbersequal=0
            #test the frame times.
            for key in ftdict.keys():
                ftime=ftdict[key]
                fdiff=ftime[1:]-ftime[:-1]
                if not numpy.alltrue(numpy.where(fdiff>(numpy.median(fdiff)*2),0,1)):
                    allframetimesequal=0

            if allframenumbersequal==0:
                print "Not all frame numbers equal"
            if allframetimesequal==0:
                print "Not all frame times within 2x median frame time"

            if err==1 or allframenumbersequal==0 or allframetimesequal==0:
                sys.exit(100+1*err+2*allframenumbersequal+4*allframetimesequal)
                #raise Exception("Frame number error")
        else:#infinite number of frames...
            myhostname=None
            if arg.has_key("myhostname"):
                myhostname=arg["myhostname"]
            fnames={}
            for key in streamDict.keys():#for each requested stream
                stream=streamDict[key]
                if outDict.has_key(key):
                    fnames[stream]=outDict[key]
                    if fnames[stream][-5:]==".fits":
                        fnames[stream]=fnames[stream][:-5]+".log"
                else:#no output specified, so make one up
                    fnames[stream]=stream+".log"
                    if arg.has_key("nosave"):
                        fnames[stream]=None
            callback=None
            if int(arg.get("print",0)):
                if int(arg.get("binary",0)):
                    class Binary:
                        def __init__(self,namedict):
                            self.namedict=namedict
                            self.hdr=numpy.zeros((24,),numpy.int8)
                            self.hdr[:4]=0x55
                        def callback(self,data):
                            self.hdr[6]=self.namedict[data[1]]#index from command line, e.g. -s1 or -s2 or whatever.
                            dtype=data[2][0].dtype.char
                            if dtype=='l' and data[2][0].itemsize==4:
                                dtype='i'
                            self.hdr[7]=ord(dtype)#datatype
                            self.hdr.view(numpy.float64)[1]=data[2][1]#timestamp
                            self.hdr.view(numpy.int32)[4]=data[2][2]#fno
                            self.hdr.view(numpy.int32)[5]=data[2][0].size*data[2][0].itemsize
                            sys.stdout.write(self.hdr)
                            sys.stdout.write(data[2][0])
                    namedict={}
                    for k in streamDict.keys():
                        namedict[streamDict[k]]=k
                    callback=Binary(namedict).callback
                else:
                    def callback(data):
                        print data
            localbuffer=int(arg.get("local",1))
            if platform.system()=="Darwin" and localbuffer==1:
                localbuffer=0
                print "Forcing remote read - OS X bug"
            ctrl.GetStreamBlock(streamDict.values(),niter,fno=fno,decimate=decimate,callback=callback,flysave=fnames,block=1,verbose=int(arg.get("verbose",0)),myhostname=myhostname,printstatus=0,localbuffer=localbuffer)
            #Now convert to FITS
            for k in fnames.keys():
                fname=fnames[k]
                if fname!=None:
                    print "Converting %s to FITS"%fname
                    s=Saver.Saver(fname,"r")
                    if fname[-4:]==".log":
                        fname=fname[:-4]
                    s.tofits(fname+".fits")
                    if bufarr!=None:
                        FITS.Write(bufarr,fname+".fits",writeMode="a",extraHeader=["COMMENT = 'State'","STATSIZE= %d"%getstate])


    elif cmd=="transfer":#transfer a file.
        if arg.has_key("file"):
            f=arg["file"]
        else:
            printUsage()
        if arg.has_key("remote"):
            r=arg["remote"]
        else:
            r=f
        data=open(f).read()
        ctrl.Transfer(data,r)
