<!--
darc, the Durham Adaptive optics Real-time Controller.
Copyright (C) 2010 Alastair Basden.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<displayset date="09/09/18 22:56:09/18/09">
<plot pos="(0, 0)" size="(493, 400)" show="0" tbVal="(0,0,1,1)"><mangle>debug=1
tbNames=["Coeffs","Zernike","Spline","With TT"]
if data.shape not in [(52,),(54,),(56,)]:
 print "Error - expecting 52, 54 or 56 actuators got %s"%str(data.shape)
nmodes=45
data[:52]-=data[:52].sum()/52.#remove piston...
if data.shape[0]>52:
 tt=(data[52:54]-32768.)/32768#remove tt offset and normalise so tt values range from -1 to 1
else:
 tt=[0,0]
if not store.has_key("z"):#do the setup...
 print "Setting up..."
 import tel
 import zernike
 store["pupfn"]=tel.Pupil(8,4,0).fn.astype(numpy.int32)
 store["actmap"]=numpy.zeros((8,8),numpy.float32)
 store["z"]=zernike.Zernike(store["pupfn"],nmodes)
 size=64
 store["out"]=numpy.zeros((size,size),numpy.float32)
 store["bigpfn"]=tel.Pupil(size,size/2,0).fn.astype(numpy.int32)
 store["ztt"]=zernike.Zernike(tel.Pupil(int(size*0.18),int(size*0.18)/2,0).fn.astype(numpy.int32),3)
 store["ttscale"]=numpy.max(store["ztt"].zern[1]+store["ztt"].zern[2])
z=store["z"]
ttscale=store["ttscale"]
bigpfn=store["bigpfn"]
ztt=store["ztt"]
actmap=store["actmap"]
pupfn=store["pupfn"]
out=store["out"]
numpy.put(actmap,numpy.nonzero(pupfn.ravel())[0],data[:52])
import overlayMaker
if tbVal[0]:#plot the zernike coeffiecients
 data=z.calcZernikeCoeff(actmap)
 title="Zernike coefficients"
 tbVal[1]=0
 tbVal[2]=0
 tbVal[3]=0
elif tbVal[1]:#plot a reconstructed zernike
 tbVal[0]=0
 tbVal[2]=0
 coeff=z.calcZernikeCoeff(actmap)
 data=z.zernikeReconstruct(coeff,out)
 title="Zernike reconstruction"
 #now inset the tip-tilt...
 if tbVal[3]:
  ttdata=ztt.zern[1]*tt[0]+ztt.zern[2]*tt[1]
  rnge=numpy.max(data)-numpy.min(data)
  data[-ttdata.shape[0]:,-ttdata.shape[1]:]+=ttdata*rnge/ttscale
  title+=" with TT"
elif tbVal[2]:#plot a cubic spline fit.
 tbVal[0]=0
 tbVal[1]=0
 data=overlayMaker.createSplineOverlay(actmap,out)*bigpfn
 #now inset the tip-tilt...
 title="Cubic spline interpolation"
 if tbVal[3]:
  ttdata=ztt.zern[1]*tt[0]+ztt.zern[2]*tt[1]
  rnge=numpy.max(data)-numpy.min(data)
  data[-ttdata.shape[0]:,-ttdata.shape[1]:]+=ttdata*rnge/ttscale
  title+=" with TT"
else:
 tbVal[3]=0
 data=actmap
 title="Reconstructed phase map"
</mangle>
<sub>[('rtcMirrorBuf',1,100)]</sub>
</plot>
</displayset>
